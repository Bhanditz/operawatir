#!/usr/bin/env jruby
require 'rubygems'
require 'optparse'
require 'rspec'
require 'rbconfig'
require 'operawatir'
require 'operawatir/helper'

@options = {
  :ng            => false,
  :color_enabled => Config::CONFIG['host_os'] =~ /mswin|mingw|bccwin|wince|emx/ ? false : true,
  :check_syntax  => false,
  :format        => 'progress'
}

# TODO
#   Should steal https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/option_parser.rb

OptionParser.new do |opts|
  opts.banner = <<EOS
Usage: operawatir [-l|--launcher=BINARY] [-e|--executable=BINARY] [--no-color]
       [-f|--format=FORMAT[:OUT_FILE]] [-o|--options=OPTIONS] [-h|--help]
       [-v|--version] FILES
EOS

  opts.separator ""
  opts.separator "Specific options:"

  opts.on('-l', '--launcher=EXECUTABLE', 'Path to launcher binary, will use environmental ',
          'variable OPERA_LAUNCHER if not specified') do |c|
    @options[:launcher] = c
  end

  opts.on('-e', '--executable=EXECUTABLE', 'Browser to run the test with, will use environmental ',
          'variable OPERA_PATH if not specified') do |e|
    @options[:path] = e
  end

  opts.on('--no-color', 'Disable colorized output') do |c|
    @options[:color_enabled] = false
  end

  #opts.on('-c', '--check-syntax', 'Check syntax only') do |c|
  #  @options[:check_syntax] = true
  #end
  
  # TODO Needs compatibility with RSpec, allow Opera/Spartan formatters but
  #   fall back to RSpec. Outfile should also be specificed by the "-o" opt.
  opts.on('-f', '--format=FORMAT[:OUT_FILE]',
          [:OperaHelperFormatter, :SpartanFormatter, :progress,
          :documentation],
          'Specify RSpec output format (OperaHelperFormatter,',
          'SpartanFormatter, proress) and optionally an output',
          'file') do |formatter|
    @options[:formatter] = formatter
  end
  
  opts.on('-o', '--options=OPTIONS', 'Options passed to the executable.  ',
          'Will override environmental variable OPERA_ARGS') do |o|
    @options[:args] = o
  end

  opts.separator ''
  opts.separator 'Common options:'

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end

  opts.on_tail('-v', '--version', 'Show version') do
    puts "OperaWatir version #{OperaWatir.version}"
    exit
  end
end.parse!(ARGV)

if ARGV.empty?
  abort 'operawatir: You need to specify at least one test file to run'
else
  @options[:files_to_run] = ARGV
end

#abort 'operawatir: --ng and --check-syntax are disabled for now' if @options[:ng] || @options[:check_syntax]

# TODO Be smarter about figuring out the Opera/Launcher path
warn 'operawatir: Launch path is not specified.' if !ENV['OPERA_LAUNCHER'] && !@options[:launcher]
warn 'operawatir: Browser path is not specified.' if !ENV['OPERA_PATH'] && !@options[:path]

OperaWatir::Helper.run! @options
